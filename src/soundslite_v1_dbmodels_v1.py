from sqlalchemy import create_engine, Column, Integer, String, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship, sessionmaker

# Note:
# *** The following code is for modelling DB-tables with the help of sqlalchemy.
# The purpose of this code is to test db-tables from the services point of view.
# This code is generated by MS Copilot ***
# Also the acceptance to use ORM like sqlalchemy should be given from the guiding course 
# responsibles. 

# Another model for implementation could be direct connectivity 
# with the sqlite db as is coded as an example in 
# "databaseservice.py"

Base = declarative_base()

class Band(Base):
    __tablename__ = 'band'
    id = Column(Integer, primary_key=True)
    bandgearbundle_id = Column(Integer, nullable=False)
    bandname = Column(String(40), nullable=False)
    bandimage_path = Column(String(255))
    bandsocmedgroupname = Column(String(40))

class Artist(Base):
    __tablename__ = 'artist'
    id = Column(Integer, primary_key=True)
    artistband_id = Column(Integer, ForeignKey('band.id'), nullable=False)
    artistgearbundle_id = Column(Integer, ForeignKey('gearbundle.id'), nullable=False)
    artistname = Column(String(40), nullable=False)
    artistpassw = Column(String(80), nullable=False)
    artistrole_1 = Column(Integer, nullable=False)
    artistrole_2 = Column(Integer, nullable=False)
    band = relationship("Band", back_populates="artists")

class Gear(Base):
    __tablename__ = 'gear'
    id = Column(Integer, primary_key=True)
    gearbundle_id = Column(Integer, ForeignKey('gearbundle.id'), nullable=False)
    gearname = Column(String(50), nullable=False)
    gearquantity = Column(Integer, nullable=False)
    gearimage_path = Column(String(255))

class GearBundle(Base):
    __tablename__ = 'gearbundle'
    id = Column(Integer, primary_key=True)
    gearbundleband_id = Column(Integer, ForeignKey('band.id'))
    gearbundleartist_id = Column(Integer, ForeignKey('artist.id'), nullable=False)
    gearbundlesound_id = Column(Integer, ForeignKey('gearbundlesound.id'), nullable=False)
    gearbundlename = Column(String(50), nullable=False)
    gearbundleimage_path = Column(String(255))
    gearbundleuserguide = Column(String(255), nullable=False)
    band = relationship("Band", back_populates="gearbundles")
    artist = relationship("Artist", back_populates="gearbundles")
    gearbundlesound = relationship("GearBundleSound", back_populates="gearbundles")

class GearBundleSound(Base):
    __tablename__ = 'gearbundlesound'
    id = Column(Integer, primary_key=True)
    gearbundle_id = Column(Integer, ForeignKey('gearbundle.id'), nullable=False)
    gearbpresetname = Column(String(50), nullable=False)
    gearbpreset_path = Column(String(255))
    gearbpsoundclip_path = Column(String(255))

class ArtistGearBundle(Base):
    __tablename__ = 'artistgearbundle'
    id = Column(Integer, primary_key=True)
    artist_id = Column(Integer, ForeignKey('artist.id'), nullable=False)
    gearbundle_id = Column(Integer, ForeignKey('gearbundle.id'), nullable=False)

class BandGearBundle(Base):
    __tablename__ = 'bandgearbundle'
    id = Column(Integer, primary_key=True)
    band_id = Column(Integer, ForeignKey('band.id'), nullable=False)
    gearbundle_id = Column(Integer, ForeignKey('gearbundle.id'), nullable=False)
